#import <Foundation/Foundation.h>
#import "CSSubaccount.h"
#import "CSApi.h"

/**
* ClickSend v3 API
*  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
*
* OpenAPI spec version: 3.1
* Contact: support@clicksend.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface CSSubaccountApi: NSObject <CSApi>

extern NSString* kCSSubaccountApiErrorDomain;
extern NSInteger kCSSubaccountApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(CSApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Delete a subaccount
/// Delete a subaccount
///
/// @param subaccountId ID of subaccount to delete
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) subaccountsBySubaccountIdDeleteWithSubaccountId: (NSNumber*) subaccountId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get specific subaccount
/// Get specific subaccount
///
/// @param subaccountId ID of subaccount to get
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) subaccountsBySubaccountIdGetWithSubaccountId: (NSNumber*) subaccountId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Update subaccount
/// Update subaccount
///
/// @param subaccountId ID of subaccount to update
/// @param subaccount Subaccount model
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) subaccountsBySubaccountIdPutWithSubaccountId: (NSNumber*) subaccountId
    subaccount: (CSSubaccount*) subaccount
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get all subaccounts
/// Get all subaccounts
///
/// @param page Page number (optional) (default to 1)
/// @param limit Number of records per page (optional) (default to 10)
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) subaccountsGetWithPage: (NSNumber*) page
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Create new subaccount
/// Create new subaccount
///
/// @param subaccount Subaccount model
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) subaccountsPostWithSubaccount: (CSSubaccount*) subaccount
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Regenerate an API Key
/// Regenerate an API Key
///
/// @param subaccountId ID of subaccount to regenerate API key for
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) subaccountsRegenApiKeyBySubaccountIdPutWithSubaccountId: (NSNumber*) subaccountId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;



@end
