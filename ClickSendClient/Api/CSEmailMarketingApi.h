#import <Foundation/Foundation.h>
#import "CSEmailAddress.h"
#import "CSEmailCampaign.h"
#import "CSApi.h"

/**
* ClickSend v3 API
*  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
*
* OpenAPI spec version: 3.1
* Contact: support@clicksend.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface CSEmailMarketingApi: NSObject <CSApi>

extern NSString* kCSEmailMarketingApiErrorDomain;
extern NSInteger kCSEmailMarketingApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(CSApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Get all email addresses
/// Get all email addresses
///
/// @param page Page number (optional) (default to 1)
/// @param limit Number of records per page (optional) (default to 10)
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) allowedEmailAddressGetWithPage: (NSNumber*) page
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Create allowed Email Address
/// Create allowed Email Address
///
/// @param emailAddress  (optional)
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) allowedEmailAddressPostWithEmailAddress: (CSEmailAddress*) emailAddress
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Cancel email campaign
/// Cancel email campaign
///
/// @param emailCampaignId Allowed email campaign id
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) cancelEmailCampaignPutWithEmailCampaignId: (NSNumber*) emailCampaignId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get specific email campaign
/// Get specific email campaign
///
/// @param emailCampaignId Allowed email campaign id
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignGetWithEmailCampaignId: (NSNumber*) emailCampaignId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Export specific email campaign history
/// Export specific email campaign history
///
/// @param emailCampaignId Allowed email campaign id
/// @param dateFrom Start date (optional)
/// @param dateTo End date (optional)
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignHistoryExportGetWithEmailCampaignId: (NSNumber*) emailCampaignId
    dateFrom: (NSNumber*) dateFrom
    dateTo: (NSNumber*) dateTo
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get specific email campaign history
/// Get specific email campaign history
///
/// @param emailCampaignId Allowed email campaign id
/// @param dateFrom Start date (optional)
/// @param dateTo End date (optional)
/// @param page Page number (optional) (default to 1)
/// @param limit Number of records per page (optional) (default to 10)
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignHistoryGetWithEmailCampaignId: (NSNumber*) emailCampaignId
    dateFrom: (NSNumber*) dateFrom
    dateTo: (NSNumber*) dateTo
    page: (NSNumber*) page
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Send email campaign
/// Send email campaign
///
/// @param emailCampaign Email model
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignPostWithEmailCampaign: (CSEmailCampaign*) emailCampaign
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Calculate email campaign price
/// Calculate email campaign price
///
/// @param emailCampaign Email model
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignPricePostWithEmailCampaign: (CSEmailCampaign*) emailCampaign
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Edit email campaign
/// Edit email campaign
///
/// @param emailCampaignId Allowed email campaign id
/// @param emailCampaign Email model
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignPutWithEmailCampaignId: (NSNumber*) emailCampaignId
    emailCampaign: (CSEmailCampaign*) emailCampaign
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get all email campaigns
/// Get all email campaigns
///
/// @param page Page number (optional) (default to 1)
/// @param limit Number of records per page (optional) (default to 10)
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) emailCampaignsGetWithPage: (NSNumber*) page
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Send verification token
/// Send verification token
///
/// @param emailAddressId Allowed email address id
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) sendVerificationTokenGetWithEmailAddressId: (NSNumber*) emailAddressId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Delete specific email address
/// Delete specific email address
///
/// @param emailAddressId Allowed email address id
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) specificAllowedEmailAddressDeleteWithEmailAddressId: (NSNumber*) emailAddressId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get specific email address
/// Get specific email address
///
/// @param emailAddressId Allowed email address id
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) specificAllowedEmailAddressGetWithEmailAddressId: (NSNumber*) emailAddressId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Verify email address using verification token
/// Verify email address using verification token
///
/// @param emailAddressId Allowed email address id
/// @param activationToken Your activation token.
/// 
///  code:200 message:"SUCCESS",
///  code:400 message:"BAD_REQUEST",
///  code:401 message:"UNAUTHORIZED",
///  code:403 message:"FORBIDDEN",
///  code:404 message:"NOT_FOUND",
///  code:405 message:"METHOD_NOT_FOUND",
///  code:429 message:"TOO_MANY_REQUESTS",
///  code:0 message:"INTERNAL_SERVER_ERROR"
///
/// @return NSString*
-(NSURLSessionTask*) verifyAllowedEmailAddressGetWithEmailAddressId: (NSNumber*) emailAddressId
    activationToken: (NSString*) activationToken
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;



@end
